// jQuery Mask Plugin v1.14.0
// github.com/igorescobar/jQuery-Mask-Plugin
!function (t) { "function" == typeof define && define.amd ? define(["jquery"], t) : "object" == typeof exports ? module.exports = t(require("jquery")) : t(jQuery || Zepto) }(function (t) { var a = function (a, e, n) { var r = { invalid: [], getCaret: function () { try { var t, e = 0, n = a.get(0), s = document.selection, o = n.selectionStart; return s && -1 === navigator.appVersion.indexOf("MSIE 10") ? (t = s.createRange(), t.moveStart("character", -r.val().length), e = t.text.length) : (o || "0" === o) && (e = o), e } catch (c) { } }, setCaret: function (t) { try { if (a.is(":focus")) { var e, n = a.get(0); n.setSelectionRange ? (n.focus(), n.setSelectionRange(t, t)) : (e = n.createTextRange(), e.collapse(!0), e.moveEnd("character", t), e.moveStart("character", t), e.select()) } } catch (r) { } }, events: function () { a.on("keydown.mask", function (t) { a.data("mask-keycode", t.keyCode || t.which) }).on(t.jMaskGlobals.useInput ? "input.mask" : "keyup.mask", r.behaviour).on("paste.mask drop.mask", function () { setTimeout(function () { a.keydown().keyup() }, 100) }).on("change.mask", function () { a.data("changed", !0) }).on("blur.mask", function () { c === r.val() || a.data("changed") || a.trigger("change"), a.data("changed", !1) }).on("blur.mask", function () { c = r.val() }).on("focus.mask", function (a) { !0 === n.selectOnFocus && t(a.target).select() }).on("focusout.mask", function () { n.clearIfNotMatch && !s.test(r.val()) && r.val("") }) }, getRegexMask: function () { for (var t, a, n, r, s = [], c = 0; c < e.length; c++) (t = o.translation[e.charAt(c)]) ? (a = t.pattern.toString().replace(/.{1}$|^.{1}/g, ""), n = t.optional, (t = t.recursive) ? (s.push(e.charAt(c)), r = { digit: e.charAt(c), pattern: a }) : s.push(n || t ? a + "?" : a)) : s.push(e.charAt(c).replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")); return s = s.join(""), r && (s = s.replace(new RegExp("(" + r.digit + "(.*" + r.digit + ")?)"), "($1)?").replace(new RegExp(r.digit, "g"), r.pattern)), new RegExp(s) }, destroyEvents: function () { a.off("input keydown keyup paste drop blur focusout ".split(" ").join(".mask ")) }, val: function (t) { var e = a.is("input") ? "val" : "text"; return 0 < arguments.length ? (a[e]() !== t && a[e](t), e = a) : e = a[e](), e }, getMCharsBeforeCount: function (t, a) { for (var n = 0, r = 0, s = e.length; s > r && t > r; r++) o.translation[e.charAt(r)] || (t = a ? t + 1 : t, n++); return n }, caretPos: function (t, a, n, s) { return o.translation[e.charAt(Math.min(t - 1, e.length - 1))] ? Math.min(t + n - a - s, n) : r.caretPos(t + 1, a, n, s) }, behaviour: function (e) { e = e || window.event, r.invalid = []; var n = a.data("mask-keycode"); if (-1 === t.inArray(n, o.byPassKeys)) { var s = r.getCaret(), c = r.val().length, i = r.getMasked(), l = i.length, u = r.getMCharsBeforeCount(l - 1) - r.getMCharsBeforeCount(c - 1), h = c > s; return r.val(i), h && (8 !== n && 46 !== n && (s = r.caretPos(s, c, l, u)), r.setCaret(s)), r.callbacks(e) } }, getMasked: function (t, a) { var s, c, i = [], l = void 0 === a ? r.val() : a + "", u = 0, h = e.length, f = 0, d = l.length, k = 1, v = "push", p = -1; for (n.reverse ? (v = "unshift", k = -1, s = 0, u = h - 1, f = d - 1, c = function () { return u > -1 && f > -1 }) : (s = h - 1, c = function () { return h > u && d > f }) ; c() ;) { var g = e.charAt(u), m = l.charAt(f), M = o.translation[g]; M ? (m.match(M.pattern) ? (i[v](m), M.recursive && (-1 === p ? p = u : u === s && (u = p - k), s === p && (u -= k)), u += k) : M.optional ? (u += k, f -= k) : M.fallback ? (i[v](M.fallback), u += k, f -= k) : r.invalid.push({ p: f, v: m, e: M.pattern }), f += k) : (t || i[v](g), m === g && (f += k), u += k) } return l = e.charAt(s), h !== d + 1 || o.translation[l] || i.push(l), i.join("") }, callbacks: function (t) { var s = r.val(), o = s !== c, i = [s, t, a, n], l = function (t, a, e) { "function" == typeof n[t] && a && n[t].apply(this, e) }; l("onChange", !0 === o, i), l("onKeyPress", !0 === o, i), l("onComplete", s.length === e.length, i), l("onInvalid", 0 < r.invalid.length, [s, t, a, r.invalid, n]) } }; a = t(a); var s, o = this, c = r.val(); e = "function" == typeof e ? e(r.val(), void 0, a, n) : e, o.mask = e, o.options = n, o.remove = function () { var t = r.getCaret(); return r.destroyEvents(), r.val(o.getCleanVal()), r.setCaret(t - r.getMCharsBeforeCount(t)), a }, o.getCleanVal = function () { return r.getMasked(!0) }, o.getMaskedVal = function (t) { return r.getMasked(!1, t) }, o.init = function (e) { e = e || !1, n = n || {}, o.clearIfNotMatch = t.jMaskGlobals.clearIfNotMatch, o.byPassKeys = t.jMaskGlobals.byPassKeys, o.translation = t.extend({}, t.jMaskGlobals.translation, n.translation), o = t.extend(!0, {}, o, n), s = r.getRegexMask(), !1 === e ? (n.placeholder && a.attr("placeholder", n.placeholder), a.data("mask") && a.attr("autocomplete", "off"), r.destroyEvents(), r.events(), e = r.getCaret(), r.val(r.getMasked()), r.setCaret(e + r.getMCharsBeforeCount(e, !0))) : (r.events(), r.val(r.getMasked())) }, o.init(!a.is("input")) }; t.maskWatchers = {}; var e = function () { var e = t(this), r = {}, s = e.attr("data-mask"); return e.attr("data-mask-reverse") && (r.reverse = !0), e.attr("data-mask-clearifnotmatch") && (r.clearIfNotMatch = !0), "true" === e.attr("data-mask-selectonfocus") && (r.selectOnFocus = !0), n(e, s, r) ? e.data("mask", new a(this, s, r)) : void 0 }, n = function (a, e, n) { n = n || {}; var r = t(a).data("mask"), s = JSON.stringify; a = t(a).val() || t(a).text(); try { return "function" == typeof e && (e = e(a)), "object" != typeof r || s(r.options) !== s(n) || r.mask !== e } catch (o) { } }; t.fn.mask = function (e, r) { r = r || {}; var s = this.selector, o = t.jMaskGlobals, c = o.watchInterval, o = r.watchInputs || o.watchInputs, i = function () { return n(this, e, r) ? t(this).data("mask", new a(this, e, r)) : void 0 }; return t(this).each(i), s && "" !== s && o && (clearInterval(t.maskWatchers[s]), t.maskWatchers[s] = setInterval(function () { t(document).find(s).each(i) }, c)), this }, t.fn.masked = function (t) { return this.data("mask").getMaskedVal(t) }, t.fn.unmask = function () { return clearInterval(t.maskWatchers[this.selector]), delete t.maskWatchers[this.selector], this.each(function () { var a = t(this).data("mask"); a && a.remove().removeData("mask") }) }, t.fn.cleanVal = function () { return this.data("mask").getCleanVal() }, t.applyDataMask = function (a) { a = a || t.jMaskGlobals.maskElements, (a instanceof t ? a : t(a)).filter(t.jMaskGlobals.dataMaskAttr).each(e) }; var r = { maskElements: "input,td,span,div", dataMaskAttr: "*[data-mask]", dataMask: !0, watchInterval: 300, watchInputs: !0, useInput: function (t) { var a, e = document.createElement("div"); return t = "on" + t, a = t in e, a || (e.setAttribute(t, "return;"), a = "function" == typeof e[t]), a }("input"), watchDataMask: !1, byPassKeys: [9, 16, 17, 18, 36, 37, 38, 39, 40, 91], translation: { 0: { pattern: /\d/ }, 9: { pattern: /\d/, optional: !0 }, "#": { pattern: /\d/, recursive: !0 }, A: { pattern: /[a-zA-Z0-9]/ }, S: { pattern: /[a-zA-Z]/ } } }; t.jMaskGlobals = t.jMaskGlobals || {}, r = t.jMaskGlobals = t.extend(!0, {}, r, t.jMaskGlobals), r.dataMask && t.applyDataMask(), setInterval(function () { t.jMaskGlobals.watchDataMask && t.applyDataMask() }, r.watchInterval) });